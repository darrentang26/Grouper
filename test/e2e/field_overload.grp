let [Int list, Int list] -> Bool eq = lambda (Int list x Int list y) 
    ((car x) mod 3) == ((car y) mod 3) end in
let [Int list, Int list] -> Int list pl = lambda (Int list x Int list y) 
    [ (car x + car y) mod 3] end in
let [Int list] -> Int list neg = lambda (Int list x) 
    [(3 - (car x)) mod 3] end in
let [Int list, Int list] -> Int list tim = lambda (Int list x Int list y)
    [((car x) * (car y)) mod 3] end in
let [Int list] -> Int list inv = lambda (Int list x) x end in
let Int list field fd = field {Int list, [0], eq, pl, neg, [1], tim, inv} in
let Int list poly xs = fd.make_poly [[1], [0]] in
let Int list poly ys = fd.make_poly [[2], [1]] in
let Int list poly zs = xs * ys in
print fd.poly_deg zs