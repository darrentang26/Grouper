let [Int, Int] -> Int add = lambda (Int n Int m) n + m end
and [Int] -> Int inverse = lambda (Int n) 1 * n end
and [Int, Int] -> Bool equals = lambda (Int n Int m) n == m end in
let Int group num_group = group {Int, 0, equals, add, inverse} in
let [Int, Int] -> Int mult = lambda (Int n Int m) n * m end in
let [Int, Int] -> Int div = lambda (Int n Int m) n / m end in
let Int ring num_ring = ring {Int, 0, equals, add, inverse, 1, mult, div}
in num_ring