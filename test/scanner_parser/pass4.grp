let [Int * Int] -> Int add = lambda (Int n Int m) n + m end
and [Int] -> Int inverse = lambda (Int n) 1 * n end
and [Int * Int] -> Bool equals = lambda (Int n Int m) n == m end
let Int group num_group = group {Int, add, 0, inverse , equals}
let [Int * Int] -> Int mult = lambda (Int n Int m) n * m end
let Int ring num_ring = ring {Int, add, 0, inverse, equals, 1, mult}
in num_ring