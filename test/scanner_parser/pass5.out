type Z2 = ZERO | ONE
let (Z2 * Z2) -> Z2 add = (a, b) -> match (a b) with
  | (ZERO, ONE) -> ONE
  | (ONE, ZERO) -> ONE
  | (_) -> ZERO in
let Z2 -> Z2 inverse = (a) -> match (a) with
  | (ZERO) -> ONE
  | (ONE) -> ZERO in
let Z2 identity = ZERO in
let (Z2 * Z2) -> Bool equals = (n, m) -> n == m in
let Z2 group mod_2_group = Z2 add identity inverse equals in
let Z2 mult_id = ONE in
let (Z2 * Z2) -> Z2 mult = (a, b) -> match (a b) with
  | (ONE, ONE) -> ONE
  | (_) -> ZERO in
let Z2 ring mod_2_ring = Z2 add identity inverse equals mult mult_id in
ZERO + ONE == ZERO