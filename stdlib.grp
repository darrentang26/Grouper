(* Top for stdlib types*)
type Fraction = {numer : Int, denom : Int}
type Error = PASS | FAIL

(* series of lets for stdlib functions *)

(* print n newlines *)
let [Int] -> Int print_newlines = lambda (Int n)
  if n < 0
    then let [Error] -> Int newlines_error = lambda (Error k) match (k) with
        | (PASS) -> 0
      end
      in let String a = print "
"
      in let String a = print "Error: print_newlines called with negative argument"
      in let String a = print "
"
        in newlines_error FAIL
    else if n == 0
      then 0
      else let String a = print "
"
        in print_newlines (n - 1)
    end
  end
end

(* print an error string and exits *)
let [String] -> Int error = lambda (String s)
  let String a = print "Error: "
  in let String a = print s
  in let Int a = print_newlines 1
  in let [Error] -> Int exit_fail = lambda (Error k) match (k) with
    | (PASS) -> 0
  end
    in (exit_fail FAIL)
end

(* Standard Integer Operations*)

(* expon: [Int, Int] -> Int 
 * params: Int base, Int pwr
 * returns: base multiplied by itself pwr number of times
 *)
let [Int, Int] -> Int expon = lambda (Int base Int pwr)  if pwr == 1 
  then base  
  else base * (expon base (pwr - 1)) end end


(* gcd: [Int, Int] -> Int
 * params: Int x, Int y
 * returns: The greatest common divisor between the bigger number x and the smaller number y
 *) 
let [Int, Int] -> Int gcd = lambda (Int x Int y)
  if y == 0 then x else
    let Int rem = x mod y in
      gcd y rem end end 

(* discrete_inv: [Int, Int] -> Int
 * params: Int a, Int p
 * returns the inverse of a in Z mod p where p is prime (maybe)
 *)    
let [Int, Int, Int, Int, Int] -> Int disc_inv_helper = 
lambda (Int old_r Int r Int old_t Int t Int base) 
  if r == 0 then if old_t < 0 then old_t + base else old_t end else 
    let Int q = old_r / r in
      disc_inv_helper r (old_r - (q * r)) t (old_t - (q * t)) base end end
let [Int, Int] -> Int discrete_inv = lambda (Int p Int a) disc_inv_helper p a 0 1 p end

(* abs *)
let [Int] -> Int abs = lambda (Int x) if x < 0 then ~x else x end end


(* Z mod a large prime, 1019 in this case *)
(* This version requires to be compiled with the standard library *)
let [Int, Int] -> Bool mod1019_eq = lambda (Int m Int n) (m mod 1019) == (n mod 1019) end in
let [Int, Int] -> Int mod1019_add = lambda (Int m Int n) (m + n) mod 1019 end in
let [Int] -> Int mod1019_neg = lambda (Int n) if n == 0 then 0 else (1019 - (n mod 1019)) end end in
let [Int, Int] -> Int mod1019_times = lambda (Int m Int n) (m * n) mod 1019 end in
let [Int] -> Int mod1019_inv = lambda (Int a) discrete_inv 1019 a end in
(* The finite field Z mod 1019*)
let Int field z_mod_large_p = field {Int, 0, mod1019_eq, mod1019_add, mod1019_neg, 1, mod1019_times, mod1019_inv} in

(* Fraction functions *)

(* simplify: [Fraction] -> Fraction
 * param: Fraction n
 * returns: n's simplest form, where the gcd of the numerator and denominator is 1
 *)
let [Fraction] -> Fraction simplify = lambda (Fraction n) 
                                        if (n.numer == n.denom) then {numer = 1, denom = 1} else
                                        let Int bigger = if ((abs n.numer) > (abs n.denom)) then (abs n.numer) else (abs n.denom) end
                                        and Int smaller = if ((abs n.numer) > (abs n.denom)) then (abs n.denom) else (abs n.numer) end in        
                                        let Int gcd_top_bot = gcd bigger smaller in
                                          {numer = (n.numer / gcd_top_bot), denom = (n.denom / gcd_top_bot)} end end in

(* frac_equal: [Fraction, Fraction] -> Bool   
 * params: Fraction m, Fraction n
 * returns: Bool of if the two fractions are equal
 *)
let [Fraction, Fraction] -> Bool frac_equal = lambda (Fraction m Fraction n) (m.numer * n.denom) == (n.numer * m.denom) end in

(* frac_add: [Fraction, Fraction] -> Fraction   
 * params: Fraction m, Fraction n
 * returns: returns the simplest form of the sum of the provided fractions
 *)
let [Fraction, Fraction] -> Fraction frac_add = lambda (Fraction m Fraction n) 
                                                  let Fraction simple_m = simplify m in
                                                  let Fraction simple_n = simplify n in
                                                    simplify {numer = (simple_n.numer * simple_m.denom + simple_m.numer * simple_n.denom), 
                                                              denom = (simple_m.denom * simple_n.denom)} end in

(* frac_neg: [Fraction] -> Fraction   
 * params: Fraction n
 * returns: The negation in simplest form
 *)
let [Fraction] -> Fraction frac_neg = lambda (Fraction n) 
                                        let Fraction simple_n = simplify n in
                                        {numer = ~(simple_n.numer), denom = simple_n.denom} end in
 

(* frac_inv: [Fraction] -> Fraction   
 * params: Fraction n
 * returns: The reciprocal in simplest form
 *)
let [Fraction] -> Fraction frac_inv = lambda (Fraction n) 
                                        let Fraction simple_n = simplify n in
                                        {numer = simple_n.denom, denom = simple_n.numer} end in

(* frac_mult: [Fraction, Fraction] -> Fraction
 * params: Fraction m, Fraction n
 * returns: the product of m and n in simplest form
 *)
let [Fraction, Fraction] -> Fraction frac_mult = lambda (Fraction m Fraction n)
                                                 simplify {numer = (m.numer * n.numer), denom = (m.denom * n.denom)} end in

(* The rationals group and field *)
let Fraction group rat_group = group {Fraction, {numer = 0, denom = 1}, frac_equal, frac_add, frac_neg} in
let Fraction field rat_field = field {Fraction, {numer = 0, denom = 1}, 
                                     frac_equal, frac_add, 
                                     frac_neg, {numer = 1, denom = 1},
                                     frac_mult, frac_inv} in 