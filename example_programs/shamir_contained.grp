(* Shamir secret sharing overview:
 *   n people want to share a secret that can only
 * be revealed when t people are present. The secret
 * is encrypted in a t - 1 degree polynomial
 * zero-degree coefficient being the secret.
 * Each n people is given a distinct (xi,yi) pair
 * such that yi = f(xi) where f is the polynomial.
 * Using polynomial interpolation f(0) of a t-1 degree
 * polynomial can be found using t distinct points,
 * thus requiring t people give their part of the secret
 *)

(* This version is standalone and can be compiled by itself *)
let [Int, Int, Int, Int, Int] -> Int disc_inv_helper = 
lambda (Int old_r Int r Int old_t Int t Int base) 
  if r == 0 then if old_t < 0 then old_t + base else old_t end else 
    let Int q = old_r / r in
      disc_inv_helper r (old_r - (q * r)) t (old_t - (q * t)) base end end in
let [Int, Int] -> Int discrete_inv = lambda (Int p Int a) disc_inv_helper p a 0 1 p end in
let [Int, Int] -> Bool mod19_eq = lambda (Int m Int n) (m mod 19) == (n mod 19) end in
let [Int, Int] -> Int mod19_add = lambda (Int m Int n) (m + n) mod 19 end in
let [Int] -> Int mod19_neg = lambda (Int n) if n == 0 then 0 else (19 - (n mod 19)) end end in
let [Int, Int] -> Int mod19_times = lambda (Int m Int n) (m * n) mod 19 end in
let [Int] -> Int mod19_inv = lambda (Int a) discrete_inv 19 a end in
let Int field zmod19 = field {Int, 0, mod19_eq, mod19_add, mod19_neg, 1, mod19_times, mod19_inv} in

(* The following are to set up the problem, not required in computation*)
let Int num_total = 15 in (* total number of sharers *)
let Int to_get_secret = 4 in (* number of sharers needed to obtain secret *)

(* The following are used in computation *)
let Int secret = 14 in (* f(0) in our polynomial, or y-intercept term, which holds the secret *)

(* Privately generated polynomial to generate keys *)
(* The following integers were randomly generated 0 < n < p, all polynomial coefficients must be unique *)
(* Every sharer recieves a pair (xi, yi) s.t. yi = f(xi) and they know only their pair *)
let Int poly coefs = zmod19.make_poly [9, 4, 18, 12, secret] in (* randomly generated coefficients *)
let Int list xs = [13, 7, 5, 14, 2] in (* unique randomly generated x value points *)

let [Int poly, Int list] -> Int list get_ys = lambda (Int poly coefs Int list xs) 
                                                if null? xs then [] 
                                                else (zmod19.poly_eval coefs (car xs))::(get_ys coefs (cdr xs)) end end in
let Int list ys = get_ys coefs xs in 
(* xs and ys are parallel lists for polynomial points, we retrieve the secret using only xs and ys *)                                                
(* using the LaGrange Polynomial Interpolation  *)

let [Int, Int list] -> Int prod = 
  lambda (Int xi Int list xjs)
    if null? xjs then 1 
    else if xi == (car xjs) then prod xi (cdr xjs)
    else zmod19.times (zmod19.times (zmod19.neg car xjs) (zmod19.inv (zmod19.plus xi (zmod19.neg car xjs)))) (prod xi (cdr xjs)) end end end in

let [Int list, Int list, Int list] -> Int sum = 
  lambda (Int list curr_xs Int list curr_ys Int list all_xs)
    if null? curr_xs then 0 
    else zmod19.plus (zmod19.times (car curr_ys) (prod (car curr_xs) all_xs)) (sum (cdr curr_xs) (cdr curr_ys) all_xs) end end

in print sum xs ys xs